trigger:
- master

pool:
  vmImage: windows-2022

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

stages:
- stage: buildbackend
  dependsOn: []
  displayName: Build backend
  jobs:
  - job: Build        
    steps:  
    - task: Cache@2
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**'
        restoreKeys: |
          nuget | "$(Agent.OS)"
        path: $(NUGET_PACKAGES)
      displayName: Cache NuGet packages
      
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: $(solution)    
        restoreArguments: --locked-mode
        arguments: --locked-mode
        feedsToUse: select
      
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: $(solution)
        arguments: --configuration $(buildConfiguration) --no-restore
      
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        arguments:  --configuration $(buildConfiguration) --no-restore --no-build --output $(Build.ArtifactStagingDirectory)
        zipAfterPublish: false

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)
        artifactName: backend

- stage: buildfrontend
  dependsOn: []
  displayName: Build frontend
  jobs:
  - job: Build        
    steps:    
    - script: npm ci
        
    - script: npm run build
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)
        artifactName: frontend
      
- stage: merge
  dependsOn: 
  - buildfrontend
  - buildbackend
  condition: and(eq(dependencies.buildfrontend.result, 'Succeeded'), eq(dependencies.buildbackend.result, 'Succeeded'))
  displayName: Merge frontend and backend project
  jobs:
  - job: Merge        
    steps:
      - checkout: none
      - download: current
      